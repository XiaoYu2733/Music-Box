
test
syntax = "proto3";
package message_v2;


/*
// 会话类型定义
int32 System    = 0; // 系统会话
int32 Private   = 1; // 私聊会话
int32 Group     = 2; // 群聊会话
int32 Signal    = 3; // 信令会话

// 消息类型定义
int32 Normal      = 0; // 普通消息
int32 Readed      = 1; // 已读消息
int32 Relation    = 2; // 关系消息
int32 Reply       = 3; // 确认消息
int32 Notify      = 4; // 通知客户端未读信息消息
int32 Pull        = 5; // 客户端拉取请求消息
int32 UnRead      = 6; // 离线/未读消息
int32 Kick        = 7; // 踢链接消息
int32 Event       = 8; // 事件消息
int32 Signal      = 9; // 信令消息

// 普通消息类型
int32 Text         = 0; // 文本
int32 Picture      = 1; // 图片
int32 Audio        = 2; // 音频
int32 Video        = 3; // 视频
int32 Emoticon     = 4; // 表情符号
int32 Card         = 5; // Card 信息
int32 Notice       = 6; // @消息
int32 Command      = 7; // 指令消息
int32 File         = 8; // 文件消息，先发后审
int32 SpecialImage = 9; // 特殊图像，主要用于审核逻辑，图片具体类型为.psd/.ai等类型
int32 ActionLink   = 10; // 可操作链接（如触发图片选择、文件选择、打开页面等）

// 群聊操作类型
int32 CreateGroup     = 0; // 建立群聊
int32 JoinGroup       = 1; // 加入群聊
int32 QuitGroup       = 2; // 退出群聊
int32 RemoveGroup     = 3; // 踢出群聊
int32 DismissGroup    = 4; // 解散群聊

// 事件消息类型
int32 DelMessage   = 0; // 删除单条消息
int32 DelSession   = 1; // 删除会话
int32 Recall       = 2; // 撤回单条消息
int32 Subscribe    = 3; // 会员订阅消息
int32 SpoilMedia   = 4; // 将图片和视频处理成裂图
int32 GroupAudit   = 5; // 审核消息
int32 ClearUnRead  = 6; // 清除未读数
int32 PullSession  = 7; // 拉取会话
int32 TopSession   = 8; // 置顶会话
int32 UnTopSession = 9；// 取消置顶会话
int32 CleanSession = 10;// 清理会话列表

// 通知消息类型
int32 PubSessionList = 0; // 下发会话列表
int32 PubUserInfo    = 1; // 下发单条用户信息
*/

// 消息体
message Message {
    int64 CreatedAt     = 1; // 消息创建时间
    int64 ExpiredAt     = 2; // 消息过期时间
    string MessageID    = 3; // 消息ID
    int32  Type         = 4; // 消息类型
    bytes Payload       = 5; // 消息体
    string PackageID    = 6; // 请求包ID
    string MaxReadedID  = 7; // 最大已读消息ID
    bytes Cookie        = 8; // 保留字段
}

message NormalMessage {
    string SendID           = 1; // 发送方ID
    string ReceiveID        = 2; // 接收方ID
    string SessionID        = 3; // 会话ID
    int32  Type             = 4; // 普通消息的类型
    bytes  Payload          = 5; // 业务层消息体
    int32  SessionType      = 6; // 会话类型
}

message ReadedMessage{
    string ReadedUID        = 1; // 已读用户的UID
    int32  SessionType      = 2; // 会话类型
}

message ReplyMessage {
    string MessageID        = 1; // 消息ID
    string PackageID        = 2; // 请求包ID
    string SessionID        = 3; // 会话ID
    int32  Code             = 4; // 回复码
    string Reason           = 5; // 回复结果
    string PreMessageID     = 6; // 上一条消息ID(信令类型专用)
    bytes  Payload          = 7; // 业务层消息体
}

message UnReadInfo {
    int32 Count       = 1; // 消息离线数
    int32 UnReadCount = 2; // 消息未读数
    Message Message   = 3; // 未读消息
    bool Notice       = 4; // 通知标识
}

message SessionInfo {
    string UID        = 1; // 会话对方的UID
    int32 UnReadCount = 2; // 消息未读数
    Message Message   = 3; // 未读消息
    bool IsPinned     = 4; // 置顶状态
}

message NotifyMessage {
    map<string,UnReadInfo> Info = 1; // 未读信息消息
    repeated SessionInfo List   = 2; // 有序会话信息列表
    bool HasMore                = 3; // 是否还有更多会话列表
    int32 TotalUnReadCount      = 4; // 未读消息总数
    bytes Payload               = 5; // 业务层用户信息
    int32 Type                  = 6; // 通知消息的类型
    string CorrelationID        = 7; // 关联的请求id(用来确定消息的对应关系)
}

message PullInfo {
    int32  Count            = 1; // 拉取数量
    string MaxMessageID     = 2; // 最大消息ID
    string MinMessageID     = 3; // 最小消息ID
    string PullID           = 4; // 拉取用户的UID
    int32  SessionType      = 5; // 会话类型
}

message PullMessage {
    repeated PullInfo List  = 1; // 拉取消息信息列表
}

message UnReadMessage {
    repeated Message List   = 1; // 未读消息列表
    int32 UnReadCount       = 2; // 消息未读数
    bool HasMore            = 3; // 是否还有更多未读消息
}

// 事件类型消息体
message EventMessage {
    string SendID           = 1; // 发送方ID
    string ReceiveID        = 2; // 接收方ID
    string MessageID        = 3; // 消息ID（要处理的消息ID，比如删除，撤回等）
    int32  Type             = 4; // 事件消息的类型
    bytes  Payload          = 5; // 事件消息体(json编码)
    int32  SessionType      = 6; // 会话类型
    string CorrelationID    = 7; // 关联的请求id(用来确定消息的对应关系)
}

// 关系类型消息体
message RelationMessage{
    string GroupID          = 1; // 群ID
    string OperationID      = 2; // 被操作人UID
    int32  Type             = 3; // 群关系类型
    bytes  Payload          = 4; // 业务层消息体
}

// 信令类型消息体
message SignalMessage {
    string SendID           = 1; // 发送方ID
    string ReceiveID        = 2; // 接收方ID
    bytes  Payload          = 3; // 业务层消息体
    string SignalID         = 4; // 信令ID
    string PreMessageID     = 5; // 上一条信令消息
    string MaxMessageID     = 6; // 当前服务端最大的信令消息ID
    int32  SessionType      = 7; // 会话类型
    int32  SerialNumber     = 8; // 信令消息序号
}
test